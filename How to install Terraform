1. How to install Terraform (step by step) 
2. IAM setup manually
3. A real-time DevOps project using Terraform (hands-on practice)
------------------------------------------------------------------
1. How to install Terraform (step by step)
   firstly create one ec2 instance manually or install terraform in local based on your requirements 
   -For Linux/Ubuntu (EC2 instance or local machine)
   Run these commands one by one:
   # Update system         : sudo apt-get update && sudo apt-get upgrade -y
   # Install dependencies  : sudo apt-get install -y wget unzip
   # Download Terraform    : wget https://releases.hashicorp.com/terraform/1.9.8/terraform_1.9.8_linux_amd64.zip
   # Unzip it              : unzip terraform_1.9.8_linux_amd64.zip
   # Move Terraform binary to /usr/local/bin : sudo mv terraform /usr/local/bin/
   # Verify installation   : terraform -version
-For Windows
   Download Terraform ZIP from Terraform Official Downloads
   Extract the ZIP file.
   Copy the terraform.exe file to a folder (e.g., C:\terraform).
   Add that folder to PATH : Go to System Properties > Advanced > Environment Variables > Path > Edit > Add C:\terraform.
   Open PowerShell or CMD and run : terraform -version
---------------------------------------------------------------------------------------------------------------------------
3. Real-Time Project (Hands-on Practice)  ðŸ‘‰ Project: Deploy an AWS Infrastructure with Terraform
   This project will create:
   1 VPC (Virtual Private Cloud)
   1 Public Subnet
   1 Internet Gateway & Route Table
   1 Security Group
   1 EC2 Instance (Ubuntu) inside the VPC

   Step 1: Create a project folder : mkdir terraform-aws-project  and change the directories to : cd terraform-aws-project
   Step 2: Create a main.tf file in your ec2 or local machine 

   provider "aws" {
   region = "us-east-1"
   }

  # VPC
  resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "MyVPC"
    }
  }

 # Subnet
  resource "aws_subnet" "my_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "MySubnet"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "my_gw" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    Name = "MyIGW"
  }
}

# Route Table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_gw.id
  }
  tags = {
    Name = "MyRouteTable"
  }
}

# Associate Subnet with Route Table
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}

# Security Group
resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id
  name   = "allow_ssh"
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "MySecurityGroup"
  }
}

# EC2 Instance
resource "aws_instance" "my_ec2" {
  ami           = "ami-0c7217cdde317cfec" # Ubuntu 22.04 LTS in us-east-1
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.my_subnet.id
  vpc_security_group_ids = [aws_security_group.my_sg.id]

  tags = {
    Name = "MyEC2"
  }
}

Step 3: Initialize Terraform         : terraform init
step 4: Validate the configuration   : terraform validate
Step 5: Apply the configuration      : terraform apply -auto-approve
Step 6: Destroy (to save cost)       : terraform destroy -auto-approve







