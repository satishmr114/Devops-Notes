1. How to install Terraform (step by step) 
2. IAM setup manually
3. A real-time DevOps project using Terraform (hands-on practice)
4. learn codings 
5. üëâ Run commands : terraform init
                      terraform plan
                      terraform apply -auto-approve

------------------------------------------------------------------
1. How to install Terraform (step by step)
   firstly create one ec2 instance manually or install terraform in local based on your requirements 
   -----For Linux/Ubuntu (EC2 instance or local machine)
   Run these commands one by one:
   # Update system         : sudo apt-get update && sudo apt-get upgrade -y
   # Install dependencies  : sudo apt-get install -y wget unzip
   # Download Terraform    : wget https://releases.hashicorp.com/terraform/1.9.8/terraform_1.9.8_linux_amd64.zip
   # Unzip it              : unzip terraform_1.9.8_linux_amd64.zip
   # Move Terraform binary to /usr/local/bin : sudo mv terraform /usr/local/bin/
   # Verify installation   : terraform -version
------For Windows
   Download Terraform ZIP from Terraform Official Downloads
   Extract the ZIP file.
   Copy the terraform.exe file to a folder (e.g., C:\terraform).
   Add that folder to PATH : Go to System Properties > Advanced > Environment Variables > Path > Edit > Add C:\terraform.
   Open PowerShell or CMD and run : terraform -version
-------------------------------------------------------------------------------------------------------------------------------------------------------
2. IAM setup manually
   Step 1 : Create IAM User
            Login to AWS Management Console.
            Go to IAM ‚Üí Users ‚Üí Add users.
            Enter a username (e.g., terraform-user).
            Select Access type:  ‚úÖ Programmatic access (for CLI/Terraform) or (Optional: AWS Management Console access if you also want console login).
            Click Next.

   Step 2: Create or Attach Permissions 
           *Here you have 2 choices*
           1.For learning only ‚Üí attach AdministratorAccess (not recommended in real-world).
           2.For best practice ‚Üí attach only specific policies (e.g., AmazonEC2FullAccess, AmazonS3FullAccess).
           üëâ Choose Attach existing policies directly and check the box.
           Click Next ‚Üí Create user.
           ‚ö†Ô∏è Download the .csv file (contains Access Key + Secret Key). You‚Äôll need this for Terraform CLI setup.

   Step 3: Configure AWS CLI On your local machine/EC2, run : aws configure
           Enter : Access Key ID 
                 : Secret Access Key
                 : Default region (e.g., us-east-1)
                 : Output format (json)
           **Now your machine is ready to use Terraform.**

  Step 4:  Create IAM Group (optional but good practice)
           IAM ‚Üí User groups ‚Üí Create group (e.g., terraform-admins).
           Attach policies to group (AdministratorAccess for learning).
           Add your terraform-user to this group.
           ‚úÖ Now any new users you add to this group automatically get permissions.

  Step 5:  Create IAM Role (for EC2) This is useful if you want EC2 instances to access AWS services (e.g., S3, DynamoDB) without keys.
           IAM ‚Üí Roles ‚Üí Create role.
           Choose AWS service ‚Üí EC2.
           Attach policies:
           Example: AmazonS3ReadOnlyAccess (if you want EC2 to read from S3).
           Example: AmazonEC2FullAccess (if you want more permissions).
           Name it: ec2-s3-role.
           Finish ‚Üí Role created.

  Step 6:  Attach Role to EC2 Instance
           Go to EC2 ‚Üí Instances.
           Select your instance ‚Üí Actions ‚Üí Security ‚Üí Modify IAM Role.
           Choose the role you just created (ec2-s3-role).
           Save.
           Now your EC2 can access AWS services (try aws s3 ls inside EC2 ‚Äî it should work without credentials)

‚úÖ That‚Äôs it! You‚Äôve manually set up IAM User + Group + Role + Instance Profile.

-----------------------------------------------------------------------------------------------------------------------------------------------------
3. Real-Time Project (Hands-on Practice)  üëâ Project: Deploy an AWS Infrastructure with Terraform
   This project will create:
   1 VPC (Virtual Private Cloud)
   1 Public Subnet
   1 Internet Gateway & Route Table
   1 Security Group
   1 EC2 Instance (Ubuntu) inside the VPC

   Step 1: Create a project folder : mkdir terraform-aws-project  and change the directories to : cd terraform-aws-project
   Step 2: Create a main.tf file in your ec2 or local machine 

   provider "aws" {
   region = "us-east-1"
   }

  # VPC
  resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "MyVPC"
    }
  }

 # Subnet
  resource "aws_subnet" "my_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "MySubnet"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "my_gw" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    Name = "MyIGW"
  }
}

# Route Table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_gw.id
  }
  tags = {
    Name = "MyRouteTable"
  }
}

# Associate Subnet with Route Table
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}

# Security Group
resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id
  name   = "allow_ssh"
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "MySecurityGroup"
  }
}

# EC2 Instance
resource "aws_instance" "my_ec2" {
  ami           = "ami-0c7217cdde317cfec" # Ubuntu 22.04 LTS in us-east-1
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.my_subnet.id
  vpc_security_group_ids = [aws_security_group.my_sg.id]

  tags = {
    Name = "MyEC2"
  }
}

   Step 3: Initialize Terraform         : terraform init
   step 4: Validate the configuration   : terraform validate
   Step 5: Apply the configuration      : terraform apply -auto-approve
   Step 6: Destroy (to save cost)       : terraform destroy -auto-approve
--------------------------------------------------------------------------------------------------------------------------------------------------

4. learn codings : Let‚Äôs build your Terraform coding journey step by step ‚Äî starting simple and moving towards real-world DevOps projects.
   Step 1              :  Basics ‚Äî Write Your First Terraform Code
   Create a folder     :  mkdir terraform-project  then cd terraform-project
   Create a file       :  main.tf
   Run commands        :  terraform init, terraform plan, terraform apply -auto-approve






